// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using car_service.API.Models;

namespace car_service.Migrations
{
    [DbContext(typeof(CarServiceDbContext))]
    [Migration("20200904071454_allUpdate")]
    partial class allUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("car_service.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("car_service.API.Models.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Check");
                });

            modelBuilder.Entity("car_service.API.Models.CheckMaterialItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpendableMaterialId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExpendableMaterialId")
                        .IsUnique();

                    b.ToTable("CheckMaterialItem");
                });

            modelBuilder.Entity("car_service.API.Models.CheckServiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CheckId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CheckId")
                        .IsUnique();

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("CheckServiceItem");
                });

            modelBuilder.Entity("car_service.API.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("car_service.API.Models.ExpendableMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ExpendableMaterial");
                });

            modelBuilder.Entity("car_service.API.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("Service");
                });

            modelBuilder.Entity("car_service.API.Models.Check", b =>
                {
                    b.HasOne("car_service.API.Models.Client", null)
                        .WithOne("Check")
                        .HasForeignKey("car_service.API.Models.Check", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("car_service.API.Models.CheckMaterialItem", b =>
                {
                    b.HasOne("car_service.API.Models.ExpendableMaterial", null)
                        .WithOne("CheckMaterialItem")
                        .HasForeignKey("car_service.API.Models.CheckMaterialItem", "ExpendableMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("car_service.API.Models.CheckServiceItem", b =>
                {
                    b.HasOne("car_service.API.Models.Check", null)
                        .WithOne("CheckServiceItem")
                        .HasForeignKey("car_service.API.Models.CheckServiceItem", "CheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("car_service.API.Models.Service", null)
                        .WithOne("CheckServiceItem")
                        .HasForeignKey("car_service.API.Models.CheckServiceItem", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("car_service.API.Models.Service", b =>
                {
                    b.HasOne("car_service.API.Models.Category", null)
                        .WithOne("Services")
                        .HasForeignKey("car_service.API.Models.Service", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
